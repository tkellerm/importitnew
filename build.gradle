plugins {
    id "de.abas.esdk" version "1.0.1"
    id 'jacoco'
    id "org.sonarqube" version "3.0"
}

repositories {
    maven { url "http://$NEXUS_HOST:$NEXUS_PORT/nexus/content/repositories/$NEXUS_NAME-SNAPSHOT" }
    maven { url "http://$NEXUS_HOST:$NEXUS_PORT/nexus/content/repositories/$NEXUS_NAME" }
    maven { url "https://registry.abas.sh/artifactory/abas.maven-public/" }
}

apply plugin: "java"


compileJava {
    targetCompatibility = '1.8'
}

test {
    useJUnitPlatform{
        includeEngines 'junit-jupiter', 'junit-vintage' , 'junit4'
    }
}



esdkAppDocumentation {
    sources {
        include 'index.adoc', 'index_en.adoc', 'changeHistory/index.adoc' , 'changeHistory/index_en.adoc'
    }
}






esdk {
    app {
        name="importit"
        vendorId="abasGmbH"
        appId="gm007"
        shared=false
        infosystems = ["IS.OWIMPORTIT.IMPORTIT"]
        tables = []
        data = []
        keys = []
        enums = []
        essentialsVersions = ["2016r1n01-2016r4n15", "2017r1n00-2017r4n17" , "2018r1n00-2018r4n17" , "2019r1n00-2019r4n20",  "2020r1n00-2020r4n17"]
        languages = "DEA"
        workdirs = ["owimportit"]
    }

    abas {
        homeDir = ABAS_HOMEDIR
        clientDir = ABAS_CLIENTDIR
        clientId = ABAS_CLIENTID
        edpHost = EDP_HOST
        edpPort = EDP_PORT.toInteger()
        edpUser = EDP_USER
        edpPassword = EDP_PASSWORD
    }

    nexus {
        nexusHost = NEXUS_HOST
        nexusPort = NEXUS_PORT.toInteger()
        nexusRepoName = NEXUS_NAME
        nexusPassword = NEXUS_PASSWORD
    }

    ssh {
        host = SSH_HOST
        port = SSH_PORT.toInteger()
        user = SSH_USER
        password = SSH_PASSWORD
        key = SSH_KEY
    }
    installType = "SSH"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

compileJava {
    options.encoding = "UTF-8"
}

configurations { compile.extendsFrom provided }

group='de.abas.infosystem.importit'

jar {
    manifest {
        attributes 'Implementation-Title': 'Importit',
                   'Implementation-Version': archiveVersion
    }
}


dependencies {
    provided "de.abas.homedir:abas-db-base:1.0.0"
    provided "de.abas.homedir:jedp:1.0.0"
    provided "de.abas.homedir:abas-jfop-runtime-api:1.0.0"
    provided "de.abas.homedir:abas-erp-common:1.0.0"
    provided "de.abas.homedir:abas-enums:1.0.0"
    provided "de.abas.homedir:abas-jfopapi:1.0.0"
    provided "de.abas.homedir:log4j:1.0.0"
    implementation "de.abas.homedir:abas-erpapi:1.0.0"
    provided "de.abas.homedir:abas-db-util:1.0.0"
    implementation "de.abas.homedir:abas-jfop-base:1.0.0"
    
    implementation "de.abas.homedir:commons-io:1.0.0"

    implementation "de.abas.homedir:abas-axi2:1.0.0"
    implementation "de.abas.homedir:abas-axi:1.0.0"
    implementation "de.abas.homedir:abas-db-internal:1.0.0"
    implementation "de.abas.clientdir:abas-db:1.0.0-SNAPSHOT"
    implementation "de.abas.clientdir:abas-db-infosys:1.0.0-SNAPSHOT"

    
    runtime "de.abas.homedir:abas-jfop-base:1.0.0"
    runtime "de.abas.homedir:commons-collections:1.0.0"
    runtime "de.abas.homedir:jcl-over-slf4j:1.0.0"
    runtime "de.abas.homedir:slf4j-api:1.0.0"
   
       
    provided 'de.abas.homedir:jedp:1.0.0'
    provided 'de.abas.homedir:abas-jedp-util:1.0.0'
    
    implementation "de.abas.clientdir:abas-db:1.0.0-SNAPSHOT"
    implementation "de.abas.clientdir:abas-db-infosys:1.0.0-SNAPSHOT"
    implementation "de.abas.clientdir:abas-db-index:1.0.0-SNAPSHOT"
        
    
    implementation "org.apache.poi:poi:4.1.0"
    implementation "org.apache.poi:poi-ooxml:4.1.0"
    implementation "org.apache.poi:poi-ooxml-schemas:4.1.0"

    implementation "org.apache.xmlbeans:xmlbeans:2.6.0"
    
    implementation "org.apache.commons:commons-lang3:3.4" 
    implementation "org.apache.commons:commons-compress:1.19"

    testImplementation "de.abas.esdk.test.util:esdk-test-utils:0.0.2"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.7.0'
    testCompile 'org.junit.jupiter:junit-jupiter:5.7.0'
    testCompile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.7.0'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.7.7'
    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.7.7'



}

configurations {
    compile.extendsFrom provided
    integTestCompile.extendsFrom testCompile
}

sourceSets {
    integTest {

        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output

    }
}

def aggregateCoverageData = rootProject.file("$buildDir/jacoco/aggregate-test-coverage-data.exec")
def aggregateCoverageReport = rootProject.file("$buildDir/reports/jacoco/test/jacocoTestReport.xml")

sonarqube {
    properties {
        property "sonar.projectKey", "abascloud_importit"
        property "sonar.organization", "abas-cloud"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", aggregateCoverageReport.absolutePath
        property "sonar.tests", "src/test,src/integTest"
        // This is done because of code build, it by convention add branch prefix for all branches, pr for PRs and tags for tags.
        // We only remove branch as other cases will not occur with us. We donot trigger builds on PRs currently or tags.
        property "sonar.branch.name", String.valueOf(System.getenv('CODEBUILD_WEBHOOK_TRIGGER')).replace("branch/", "")
        // AbasV2019 must be replaced with a property
        property "sonar.branch.target", "AbasV2019"
        property "sonar.links.scmproperty", "https://bitbucket.org/abascloud/importit"
    }
}

task mergeJacocoCoverageData(type: JacocoMerge) {
    description("Merges coverage data emitted by JaCoCo agent during unit and integration testing")

    dependsOn ":verify"
    dependsOn ":retrieveServerSideCoverage"

    def reports = rootProject.fileTree(dir: '.', include: 'build/jacoco/*.exec')
    destinationFile = aggregateCoverageData
    executionData = reports
}

task createCodeCoverageReport(type: JacocoReport) {
    description("Generates a coverage report from the aggregated test coverage data")

    dependsOn mergeJacocoCoverageData

    sourceDirectories.setFrom(rootProject.sourceSets.main.allJava.srcDirs)
    classDirectories.setFrom(rootProject.sourceSets.main.output.classesDirs)

    executionData aggregateCoverageData

    reports {
        xml.enabled true
        xml.destination aggregateCoverageReport
    }


}
def getParentGitBranch() {
    return runGitCommand('git show-branch -a | grep \'\\*\' | grep -v `git rev-parse --abbrev-ref HEAD` | head -n1 | sed \'s/.*\\[\\(.*\\)\\].*/\\1/\' | sed \'s/[\\^~].*//\'')
}

def getCurrentGitBranch() {
    return runGitCommand('git rev-parse --abbrev-ref HEAD')
}

def runGitCommand(String gitCommand) {
    def output = "Command not run yet"
    try {
        def workingDir = new File("${rootProject.projectDir}")
        def result = ['sh', '-c', gitCommand].execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            output = result.text.trim()
        }
    } catch (e) {
        e.printStackTrace()
    }
    return output
}